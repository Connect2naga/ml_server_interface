syntax = "proto3";
package experiment.ml_server;
option go_package = "github.com/grpc/ml_server";



message ClientDetails{
  string        name     = 1;
  string        email    = 2;
}

message ClientCredentials{
  string        agentID      = 1;
  string        clientID     = 2;
  string        clientSecret = 3;
  string        token        = 4;
}

// Agent registrations to start the Experiment
service AgentHandler {
  rpc RegisterAgent(ClientDetails) returns(ClientCredentials){}
}


message Limit {
  string min = 1;
  string max = 2;
}

message Null {};

message Cpu {
  string    limit     = 1;
  string    request   = 2;
}

message Memory {
  string    limit     = 1;
  string    request   = 2;
}


message ResourceLimits{
  Cpu cpu    = 1;
  Memory memory = 2;
}


message ExperimentSetupRequest{
  map<string, string> agentDetails                = 1;
  map<string, string> applicationDetails          = 2;
  int32               noOfIterations              = 3;
  Limit               cpu                         = 4;
  Limit               memory                      = 5;
  ResourceLimits      initialLimits               = 6;
  string              AgentAddress                = 7;
  string              MLDataCollectorAddress      = 8;
}

message ResourceUsage {
  string      cpu       =  1;
  string      memory    =  2;
}

message IterationsDetails {
  IterationReq request    =1;
  IterationResp response  =2;
  int32 IterationNumber   =3;
}

message IterationReq{
  string                iterationID       = 1;
  string                experimentID      = 2;
  ResourceLimits        limits            = 3;
}

message IterationResp{
  string                status            = 1;
  string                iterationID       = 2;
  string                experimentID      = 3;
  ResourceUsage         maxLimit          = 4;
  repeated ResourceUsage resourceLimits   = 5;
}

//If the experiment start, tit will show the results.
message ExperimentSetupResponse{
  string                      exp_id    = 1;
  string                      status    = 2;
  repeated IterationsDetails  results   = 3;
}

message Experiment{
  string  exp_id            = 1;
}

message TerminationResp{
  string message = 1;
}

service ExperimentHandler {
  rpc Setup(ExperimentSetupRequest) returns(ExperimentSetupResponse){}
  rpc StartExperiment(Experiment) returns(Null){}
  rpc StatusExperiment(Experiment) returns(ExperimentSetupResponse){}
  rpc StopExperiment(Experiment) returns(TerminationResp){}
}


// Callback details
message AgentNotification{
  string                  experimentID      = 1;
  string                  status            = 2;
}

message DataCollectorNotification{
  string                  experimentID      = 1;
  string                  status            = 2;
}

message DataCollectorNotificationResponce{
  string                  status            = 1;
  ExperimentSetupRequest  setup             = 2;
}


service ServerCallBacksHandler {
  rpc MLAgentSetupCallback(AgentNotification) returns(Null){}
  rpc DataCollectorSetupCallback(DataCollectorNotification) returns(DataCollectorNotificationResponce){}
  rpc DataCollectorIterationStatusCallback(IterationsDetails) returns(Null){}
}

