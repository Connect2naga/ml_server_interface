syntax = "proto3";
package experiment;
option go_package = "gitlab.com/tariandev_intelops/ml-server/experiment";

message Limit {
  string min = 1;
  string max = 2;
}

message ExperimentSetupRequest{
  map<string, string> agentDetails        = 1;
  map<string, string> applicationDetails  = 2;
  int32 noOfIterations                    = 3;
  int32 iterationDurations                = 4;
  string durationUnit                     = 5;
  Limit cpu                               = 8;
  Limit memory                            = 9;
  bool startExperimentOnSetupReady        = 10;
}

message ResourceLimits{
  string cpu    = 1;
  string memory = 2;
}

message ExperimentSetupResponse{
  string exp_id                           = 1;
  string status                           = 2;
  repeated ResourceLimits resourceLimits  = 3;
}

message Experiment{
  string  exp_id            = 1;
}

message TerminationResp{
  string message = 1;
}
message Null {};


message ClientDetails{
  string name = 1;
}

message ClientCredentials{
  string AgentID      = 1;
  string clientID     = 2;
  string clientSecret = 3;
  string token        = 4;
}

message IterationResp{
  string                status            = 1;
  string                iterationID       = 2;
  string                experimentID      = 3;
  ResourceLimits        maxLimit          = 4;
  repeated ResourceLimits resourceLimits  = 5;
}

message DataCollectorNotification{
  string                  status            = 1;
}

message DataCollectorNotificationResponce{
  string                  status            = 1;
  ExperimentSetupRequest  setup             = 2;
}



service IterationHandler {
  rpc StartIterationExperiment(Experiment) returns(Null){}
  rpc StatusIterationExperiment(Experiment) returns(IterationResp){}
}


service AgentHandler {
  rpc RegisterAgent(ClientDetails) returns(ClientCredentials){}
}

service ExperimentHandler {
  rpc Setup(ExperimentSetupRequest) returns(ExperimentSetupResponse){}
  rpc StartExperiment(Experiment) returns(Null){}
  rpc StatusExperiment(Experiment) returns(ExperimentSetupResponse){}
  rpc StopExperiment(Experiment) returns(TerminationResp){}
}


service ServerCallBacksHandler {
  rpc IterationsResults(IterationResp) returns(Null){}
  rpc DataCollectorCallback(DataCollectorNotification) returns(DataCollectorNotificationResponce){}
}