syntax = "proto3";
package experiment;
option go_package = "gitlab.com/tariandev_intelops/ml-server/experiment";

message ResourceUsage {
  string cpu      =  1;
  string memory   =  2;
}

message Cpu {
  string limit    = 1;
  string required = 2;
}

message Memory {
  string limit    = 1;
  string required = 2;
}

message Limit {
  string min = 1;
  string max = 2;
}

message ExperimentSetupRequest{
  map<string, string> agentDetails                = 1;
  map<string, string> applicationDetails          = 2;
  int32               noOfIterations              = 3;
  int32               iterationDurations          = 4;
  string              durationUnit                = 5;
  Limit               cpu                         = 8;
  Limit               memory                      = 9;
  bool                startExperimentOnSetupReady = 10;
  ResourceLimits      initialLimits               = 11;
  string              AgentAddress                = 12;
}

message ResourceLimits{
  Cpu cpu    = 1;
  Memory memory = 2;
}

message ExperimentSetupResponse{
  string exp_id                           = 1;
  string status                           = 2;
  repeated ResourceUsage resourceLimits   = 3;
}

message Experiment{
  string  exp_id            = 1;
}

message TerminationResp{
  string message = 1;
}
message Null {};


message ClientDetails{
  string name = 1;
}

message ClientCredentials{
  string AgentID      = 1;
  string clientID     = 2;
  string clientSecret = 3;
  string token        = 4;
}

message IterationsDetails {
    IterationReq request    =1;
    IterationResp response  =2;
    int32 IterationNumber   =3;
}

message IterationReq{
  string                iterationID       = 1;
  string                experimentID      = 2;
  ResourceLimits        initialLimits     = 3;
  ExperimentSetupRequest setupReq         = 4;
}

message IterationResp{
  string                status            = 1;
  string                iterationID       = 2;
  string                experimentID      = 3;
  ResourceUsage         maxLimit          = 4;
  repeated ResourceUsage resourceLimits   = 5;
}

message DataCollectorNotification{
  string                  experimentID      = 1;
  string                  status            = 2;
}

message AgentNotification{
  string                  experimentID      = 1;
  string                  status            = 2;
}

message DataCollectorNotificationResponce{
  string                  status            = 1;
  ExperimentSetupRequest  setup             = 2;
}



service IterationHandler {
  rpc StatusIterationExperiment(Experiment) returns(IterationResp){}
  rpc StartIterationExperiment(IterationReq) returns(Null){}
  rpc SetupIterationExperiment(Experiment) returns(DataCollectorNotificationResponce){}
}


service AgentHandler {
  rpc RegisterAgent(ClientDetails) returns(ClientCredentials){}
}

service ExperimentHandler {
  rpc Setup(ExperimentSetupRequest) returns(ExperimentSetupResponse){}
  rpc StartExperiment(Experiment) returns(Null){}
  rpc StatusExperiment(Experiment) returns(ExperimentSetupResponse){}
  rpc StopExperiment(Experiment) returns(TerminationResp){}
}

service ServerCallBacksHandler {
  rpc MLAgentSetupCallback(AgentNotification) returns(Null){}
  rpc DataCollectorSetupCallback(DataCollectorNotification) returns(DataCollectorNotificationResponce){}
  rpc DataCollectorIterationStatusCallback(IterationsDetails) returns(Null){}
}

service IterationCallBacksHandler {
  rpc IterationsResults(IterationResp) returns(Null){}
}